export type UrlStringPrefix = typeof URL_STRING_PREFIX;
export type UrlString = `${UrlStringPrefix}${string}`;
export type UrlOrUrlString = URL | UrlString;
export type UrlOrPath = URL | string;
export type OptionalUrlOrPath = UrlOrPath | undefined;
/** @type {(urlOrPath: unknown) => urlOrPath is UrlOrUrlString} */
export const isUrl: (urlOrPath: unknown) => urlOrPath is UrlOrUrlString;
/**
@typedef {typeof URL_STRING_PREFIX} UrlStringPrefix
@typedef {`${UrlStringPrefix}${string}`} UrlString
@typedef {URL | UrlString} UrlOrUrlString
@typedef {URL | string} UrlOrPath
@typedef {UrlOrPath | undefined} OptionalUrlOrPath
*/
/** @type {(value: unknown) => value is URL} */
export const isUrlInstance: (value: unknown) => value is URL;
/** @type {(value: unknown) => value is UrlString} */
export const isUrlString: (value: unknown) => value is UrlString;
/**
@template {OptionalUrlOrPath} [Input = UrlOrPath]
@param {Input} urlOrPath
@returns {(Input extends UrlOrPath ? string : Input)}
*/
export function toAbsolutePath<Input extends OptionalUrlOrPath = UrlOrPath>(urlOrPath: Input): (Input extends UrlOrPath ? string : Input);
/**
@template {OptionalUrlOrPath} [Input = UrlOrPath]
@param {Input} urlOrPath
@returns {(Input extends UrlOrPath ? URL : Input)}
*/
export function toDirectory<Input extends OptionalUrlOrPath = UrlOrPath>(urlOrPath: Input): (Input extends UrlOrPath ? URL : Input);
/**
@template {OptionalUrlOrPath} [Input = UrlOrPath]
@param {Input} urlOrPath
@returns {(Input extends UrlOrPath ? string : Input)}
*/
export function toPath<Input extends OptionalUrlOrPath = UrlOrPath>(urlOrPath: Input): (Input extends UrlOrPath ? string : Input);
/**
@template {OptionalUrlOrPath} [Input = UrlOrPath]
@param {Input} urlOrPath
@returns {(Input extends UrlOrPath ? URL : Input)}
*/
export function toUrl<Input extends OptionalUrlOrPath = UrlOrPath>(urlOrPath: Input): (Input extends UrlOrPath ? URL : Input);
declare const URL_STRING_PREFIX: "file:";
export { isUrl as isURL, isUrlInstance as isURLInstance, isUrlString as isURLString, toUrl as toURL };
