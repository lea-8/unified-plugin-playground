/**
 * @typedef Definition
 *   Info.
 * @property {true} [allowUnknown=false]
 *   Whether arbitrary values are allowed (default: `false`).
 * @property {true} [caseSensitive=false]
 *   Enumerated values are often treated case-insensitive, except when this
 *   field is on (default: `false`).
 * @property {string | null} [invalid]
 *   Invalid value default; `null` means a particular unnamed state.
 * @property {string | null} [missing]
 *   Missing value default; `null` means a particular unnamed state.
 * @property {string | undefined} [selector]
 *   Simple CSS selector; can contain commas; missing means it applies to all
 *   elements.
 * @property {Array<Array<string> | string | null>} states
 *   Possible states.
 */
/**
 * Enumerated HTML attributes.
 *
 * @type {Record<string, Array<Definition> | Definition>}
 */
export const enumeratedAttributes: Record<string, Array<Definition> | Definition>;
/**
 * Info.
 */
export type Definition = {
    /**
     * Whether arbitrary values are allowed (default: `false`).
     */
    allowUnknown?: true;
    /**
     * Enumerated values are often treated case-insensitive, except when this
     * field is on (default: `false`).
     */
    caseSensitive?: true;
    /**
     * Invalid value default; `null` means a particular unnamed state.
     */
    invalid?: string | null;
    /**
     * Missing value default; `null` means a particular unnamed state.
     */
    missing?: string | null;
    /**
     * Simple CSS selector; can contain commas; missing means it applies to all
     * elements.
     */
    selector?: string | undefined;
    /**
     *   Possible states.
     */
    states: Array<Array<string> | string | null>;
};
//# sourceMappingURL=index.d.ts.map